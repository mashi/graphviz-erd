name: ci

# workflow triggers
on:
  push:
    branches:
      - '**' # every branch
    tags:
      - '**'
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'

jobs:
  formatter:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: code formatter
        run: |
          pip install wheel
          pip install black
          black --check src/
          black --check tests/

  coverage:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: coverage
        run: |
          pip install wheel
          pip install -r requirements.txt
          coverage run -m unittest discover -b
          coverage xml
      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos

  test-and-build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python: [3.7, 3.8, 3.9, '3.10']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: install packages
        run: |
          pip install wheel
          pip install -r requirements.txt
      - name: unittest
        run: |
          python -m unittest discover -b
          python -m build

  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [formatter, test-and-build]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: deploy
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USER }}
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip install wheel
          pip install -r requirements.txt
          python -m build
          python -m twine upload dist/*

  docs:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: docs
        run: |
          pip install wheel
          pip install -r docs/requirements-docs.txt
          sphinx-build -E -b html docs/source docs/_build
      - name: compress
        run: |
          apt update && apt install zip -y
          zip -r docs.zip docs/_build
          ls
      - name: store artifact
        uses: actions/upload-artifact@v3
        with:
          name: docs
          path: docs.zip
          retention-days: 1

  # check if the makefile recipes are valid
  makefile:
    # needs: [test-and-build, docs] # commented because the serial execution slowed down the CI
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: makefile recipes
        run: |
          make install
          make docs
          make tests
          make build
